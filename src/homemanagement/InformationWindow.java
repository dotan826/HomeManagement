/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package homemanagement;

import java.awt.ComponentOrientation;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import javax.swing.JLabel;
import javax.swing.JTable;
import javax.swing.WindowConstants;
import javax.swing.table.DefaultTableCellRenderer;

/**
 *
 * @author Someone
 */
public class InformationWindow extends javax.swing.JFrame {
    private HelpMethods helpM;     // All program methods in one place (WITHOUT GUI!!!)
    private WindowFirst window1;   // Main Window
    private NotesWindow window3;   // Notes Window
    
    /**
     * Creates new form SettingsWindow
     * @param helpM
     * @param window1
     */
    public InformationWindow(HelpMethods helpM, WindowFirst window1) {
        initComponents();
        this.helpM = helpM;
        this.window1 = window1;
        this.setSize(1150, 520);
        this.setLocation(190, 160);
        this.setResizable(false);
        this.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        StringBuffer pad = new StringBuffer();
        for(int i=0; i<150; i++){
            pad.append(" ");
        }
        this.setTitle(pad + "מידע על חשבונות");
        TableInfo.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);     // changes the direction of the columns Right To Left
        
        DefaultTableCellRenderer rightRenderer = new DefaultTableCellRenderer();    // alignment the cells data Right To Left
        rightRenderer.setHorizontalAlignment(JLabel.RIGHT);                         // ...
        for(int i=0; i<TableInfo.getColumnCount(); i++){                              // ...
            TableInfo.getColumnModel().getColumn(i).setCellRenderer(rightRenderer);   // set cells right alignment
            TableInfo.getColumnModel().getColumn(i).setHeaderRenderer(rightRenderer); // set header right alignment
        }
        
        helpM.SQLiteJDBCDriverGetAllInformationFromTable(TableInfo, window1);  // get all sql data into the gui table
        
        ((JLabel)ComboBoxExpenseType.getRenderer()).setHorizontalAlignment(JLabel.RIGHT);                // text right align
        ((JLabel)ComboBoxUpdateExpenseMoneySumType.getRenderer()).setHorizontalAlignment(JLabel.RIGHT);  // ...
        ((JLabel)ComboBoxUpdateExpenseMoneySumMonth.getRenderer()).setHorizontalAlignment(JLabel.RIGHT); // ...
        ((JLabel)ComboBoxUpdateExpenseNote.getRenderer()).setHorizontalAlignment(JLabel.RIGHT);          // ...
        this.refreshComboBoxes(); // refresh ComboBoxes Values.
        
    }
    
    /**
     * Referesh all ComboBoxes each time there is a change.
     */
    public void refreshComboBoxes(){
        ComboBoxExpenseType.removeAllItems();                // remove all items from the list before adding the updated list
        ComboBoxUpdateExpenseMoneySumType.removeAllItems();  // ...
        ComboBoxUpdateExpenseNote.removeAllItems();          // ...
        ArrayList<String> expenseTypeValues = helpM.SQLiteJDBCDriverGetSpecificColumn("ExpenseType", window1); // gets all column values in array of strings
        for(String rowValue : expenseTypeValues){ // fill combobox with values
            ComboBoxExpenseType.addItem(rowValue);
            ComboBoxUpdateExpenseMoneySumType.addItem(rowValue);
            ComboBoxUpdateExpenseNote.addItem(rowValue);
        }
    } // end of method

    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        TableInfo = new javax.swing.JTable();
        ButtonBack = new javax.swing.JButton();
        ButtonUpdateExpenseNote = new javax.swing.JButton();
        ButtonDeleteExpenseType = new javax.swing.JButton();
        ComboBoxUpdateExpenseNote = new javax.swing.JComboBox<>();
        LabelUpdateExpenseNote = new javax.swing.JLabel();
        LabelDeleteExpenseType = new javax.swing.JLabel();
        TextFieldUpdateExpenseMoneySum = new javax.swing.JTextField();
        LabelAddExpenseType = new javax.swing.JLabel();
        ComboBoxExpenseType = new javax.swing.JComboBox<>();
        TextFieldAddExpenseType = new javax.swing.JTextField();
        ButtonAddExpenseType = new javax.swing.JButton();
        LabelUpdateExpenseMoneySum = new javax.swing.JLabel();
        ComboBoxUpdateExpenseMoneySumMonth = new javax.swing.JComboBox<>();
        ButtonUpdateExpenseMoneySum = new javax.swing.JButton();
        ComboBoxUpdateExpenseMoneySumType = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setSize(new java.awt.Dimension(0, 0));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        TableInfo.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        TableInfo.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        TableInfo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "סוג הוצאה", "ינואר", "פברואר", "מרץ", "אפריל", "מאי", "יוני", "יולי", "אוגוסט", "ספטמבר", "אוקטובר", "נובמבר", "דצמבר", "מצטבר שנתי", "הערות"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        TableInfo.setCellSelectionEnabled(true);
        jScrollPane1.setViewportView(TableInfo);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(22, 20, 1080, 360));

        ButtonBack.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        ButtonBack.setText("חזרה");
        ButtonBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonBackActionPerformed(evt);
            }
        });
        jPanel1.add(ButtonBack, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 390, 100, 60));

        ButtonUpdateExpenseNote.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        ButtonUpdateExpenseNote.setText("הצג");
        ButtonUpdateExpenseNote.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonUpdateExpenseNoteActionPerformed(evt);
            }
        });
        jPanel1.add(ButtonUpdateExpenseNote, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 430, 90, -1));

        ButtonDeleteExpenseType.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        ButtonDeleteExpenseType.setText("מחק");
        ButtonDeleteExpenseType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonDeleteExpenseTypeActionPerformed(evt);
            }
        });
        jPanel1.add(ButtonDeleteExpenseType, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 430, 90, -1));

        ComboBoxUpdateExpenseNote.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jPanel1.add(ComboBoxUpdateExpenseNote, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 430, 270, -1));

        LabelUpdateExpenseNote.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        LabelUpdateExpenseNote.setText("עדכן הערה לפי סוג הוצאה :");
        jPanel1.add(LabelUpdateExpenseNote, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 430, 170, -1));

        LabelDeleteExpenseType.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        LabelDeleteExpenseType.setText("מחק סוג הוצאה :");
        jPanel1.add(LabelDeleteExpenseType, new org.netbeans.lib.awtextra.AbsoluteConstraints(1000, 430, 100, -1));

        TextFieldUpdateExpenseMoneySum.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        TextFieldUpdateExpenseMoneySum.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        TextFieldUpdateExpenseMoneySum.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                enterPrassed(evt);
            }
        });
        jPanel1.add(TextFieldUpdateExpenseMoneySum, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 400, 80, -1));

        LabelAddExpenseType.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        LabelAddExpenseType.setText("הוסף סוג הוצאה :");
        jPanel1.add(LabelAddExpenseType, new org.netbeans.lib.awtextra.AbsoluteConstraints(992, 400, 110, -1));

        ComboBoxExpenseType.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jPanel1.add(ComboBoxExpenseType, new org.netbeans.lib.awtextra.AbsoluteConstraints(860, 430, 120, -1));

        TextFieldAddExpenseType.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        TextFieldAddExpenseType.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        TextFieldAddExpenseType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TextFieldAddExpenseTypeActionPerformed(evt);
            }
        });
        TextFieldAddExpenseType.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                enterPressed(evt);
            }
        });
        jPanel1.add(TextFieldAddExpenseType, new org.netbeans.lib.awtextra.AbsoluteConstraints(860, 400, 120, -1));

        ButtonAddExpenseType.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        ButtonAddExpenseType.setText("הוסף");
        ButtonAddExpenseType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonAddExpenseTypeActionPerformed(evt);
            }
        });
        jPanel1.add(ButtonAddExpenseType, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 400, 90, -1));

        LabelUpdateExpenseMoneySum.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        LabelUpdateExpenseMoneySum.setText("עדכן סכום הוצאה :");
        jPanel1.add(LabelUpdateExpenseMoneySum, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 400, 110, -1));

        ComboBoxUpdateExpenseMoneySumMonth.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        ComboBoxUpdateExpenseMoneySumMonth.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "ינואר", "פברואר", "מרץ", "אפריל", "מאי", "יוני", "יולי", "אוגוסט", "ספטמבר", "אוקטובר", "נובמבר", "דצמבר" }));
        jPanel1.add(ComboBoxUpdateExpenseMoneySumMonth, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 400, 110, -1));

        ButtonUpdateExpenseMoneySum.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        ButtonUpdateExpenseMoneySum.setText("עדכן");
        ButtonUpdateExpenseMoneySum.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonUpdateExpenseMoneySumActionPerformed(evt);
            }
        });
        jPanel1.add(ButtonUpdateExpenseMoneySum, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 400, 90, -1));

        ComboBoxUpdateExpenseMoneySumType.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jPanel1.add(ComboBoxUpdateExpenseMoneySumType, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 400, 120, -1));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 1120, 470));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ButtonBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonBackActionPerformed
        window1.setVisible(true); // show Main Window
        this.dispose();
    }//GEN-LAST:event_ButtonBackActionPerformed

    private void ButtonDeleteExpenseTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonDeleteExpenseTypeActionPerformed
        if(ComboBoxExpenseType.getItemCount()>0){
            helpM.SQLiteJDBCDriverDeleteExpenseType(ComboBoxExpenseType.getSelectedItem().toString(), window1);
            helpM.SQLiteJDBCDriverGetAllInformationFromTable(TableInfo, window1);  // refesh the data in the table!
            this.refreshComboBoxes(); // refresh comboboxes each time expense type removed
        }
    }//GEN-LAST:event_ButtonDeleteExpenseTypeActionPerformed

    private void ButtonUpdateExpenseMoneySumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonUpdateExpenseMoneySumActionPerformed
        if(TextFieldUpdateExpenseMoneySum.getText().length()>0){
            switch(ComboBoxUpdateExpenseMoneySumMonth.getSelectedItem().toString()){
                case "ינואר":
                    helpM.SQLiteJDBCDriverUpdateExpenseMoneySum(ComboBoxUpdateExpenseMoneySumType.getSelectedItem().toString(), "January", Integer.parseInt(TextFieldUpdateExpenseMoneySum.getText()), window1);
                    break;
                case "פברואר":
                    helpM.SQLiteJDBCDriverUpdateExpenseMoneySum(ComboBoxUpdateExpenseMoneySumType.getSelectedItem().toString(), "February", Integer.parseInt(TextFieldUpdateExpenseMoneySum.getText()), window1);
                    break;
                case "מרץ":
                    helpM.SQLiteJDBCDriverUpdateExpenseMoneySum(ComboBoxUpdateExpenseMoneySumType.getSelectedItem().toString(), "March", Integer.parseInt(TextFieldUpdateExpenseMoneySum.getText()), window1);
                    break;
                case "אפריל":
                    helpM.SQLiteJDBCDriverUpdateExpenseMoneySum(ComboBoxUpdateExpenseMoneySumType.getSelectedItem().toString(), "April", Integer.parseInt(TextFieldUpdateExpenseMoneySum.getText()), window1);
                    break;
                case "מאי":
                    helpM.SQLiteJDBCDriverUpdateExpenseMoneySum(ComboBoxUpdateExpenseMoneySumType.getSelectedItem().toString(), "May", Integer.parseInt(TextFieldUpdateExpenseMoneySum.getText()), window1);
                    break;
                case "יוני":
                    helpM.SQLiteJDBCDriverUpdateExpenseMoneySum(ComboBoxUpdateExpenseMoneySumType.getSelectedItem().toString(), "June", Integer.parseInt(TextFieldUpdateExpenseMoneySum.getText()), window1);
                    break;
                case "יולי":
                    helpM.SQLiteJDBCDriverUpdateExpenseMoneySum(ComboBoxUpdateExpenseMoneySumType.getSelectedItem().toString(), "July", Integer.parseInt(TextFieldUpdateExpenseMoneySum.getText()), window1);
                    break;
                case "אוגוסט":
                    helpM.SQLiteJDBCDriverUpdateExpenseMoneySum(ComboBoxUpdateExpenseMoneySumType.getSelectedItem().toString(), "August", Integer.parseInt(TextFieldUpdateExpenseMoneySum.getText()), window1);
                    break;
                case "ספטמבר":
                    helpM.SQLiteJDBCDriverUpdateExpenseMoneySum(ComboBoxUpdateExpenseMoneySumType.getSelectedItem().toString(), "September", Integer.parseInt(TextFieldUpdateExpenseMoneySum.getText()), window1);
                    break;
                case "אוקטובר":
                    helpM.SQLiteJDBCDriverUpdateExpenseMoneySum(ComboBoxUpdateExpenseMoneySumType.getSelectedItem().toString(), "October", Integer.parseInt(TextFieldUpdateExpenseMoneySum.getText()), window1);
                    break;
                case "נובמבר":
                    helpM.SQLiteJDBCDriverUpdateExpenseMoneySum(ComboBoxUpdateExpenseMoneySumType.getSelectedItem().toString(), "November", Integer.parseInt(TextFieldUpdateExpenseMoneySum.getText()), window1);
                    break;
                case "דצמבר":
                    helpM.SQLiteJDBCDriverUpdateExpenseMoneySum(ComboBoxUpdateExpenseMoneySumType.getSelectedItem().toString(), "December", Integer.parseInt(TextFieldUpdateExpenseMoneySum.getText()), window1);
                    break;
            }
            TextFieldUpdateExpenseMoneySum.setText("");
            helpM.SQLiteJDBCDriverGetAllInformationFromTable(TableInfo, window1);  // refesh the data in the table!
        }
    }//GEN-LAST:event_ButtonUpdateExpenseMoneySumActionPerformed

    private void ButtonUpdateExpenseNoteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonUpdateExpenseNoteActionPerformed
        if(ComboBoxUpdateExpenseNote.getItemCount()>0){
            String currentNotes = helpM.SQLiteJDBCDriverGetSpecificNotesRow(ComboBoxUpdateExpenseNote.getSelectedItem().toString(), window1);
            window3 = new NotesWindow(helpM, window1, this, currentNotes,ComboBoxUpdateExpenseNote.getSelectedItem().toString()); // create information window
            window3.setVisible(true);  // show information window
        }
    }//GEN-LAST:event_ButtonUpdateExpenseNoteActionPerformed

    private void enterPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_enterPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            if (TextFieldAddExpenseType.getText().length() > 0) { // if there is input then insert a new row
                helpM.SQLiteJDBCDriverInsertNewExpenseType(TextFieldAddExpenseType.getText(), window1);
                TextFieldAddExpenseType.setText("");
                helpM.SQLiteJDBCDriverGetAllInformationFromTable(TableInfo, window1);  // refesh the data in the table!
                this.refreshComboBoxes(); // refresh comboboxes each time expense type added
            }
        }
    }//GEN-LAST:event_enterPressed

    private void ButtonAddExpenseTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonAddExpenseTypeActionPerformed
       if(TextFieldAddExpenseType.getText().length()>0){ // if there is input then insert a new row
            helpM.SQLiteJDBCDriverInsertNewExpenseType(TextFieldAddExpenseType.getText(), window1);
            TextFieldAddExpenseType.setText("");
            helpM.SQLiteJDBCDriverGetAllInformationFromTable(TableInfo, window1);  // refesh the data in the table!
            this.refreshComboBoxes(); // refresh comboboxes each time expense type added
        }
    }//GEN-LAST:event_ButtonAddExpenseTypeActionPerformed

    private void enterPrassed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_enterPrassed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) { // if enter was pressed
            if (TextFieldUpdateExpenseMoneySum.getText().length() > 0) {
                switch (ComboBoxUpdateExpenseMoneySumMonth.getSelectedItem().toString()) {
                    case "ינואר":
                        helpM.SQLiteJDBCDriverUpdateExpenseMoneySum(ComboBoxUpdateExpenseMoneySumType.getSelectedItem().toString(), "January", Integer.parseInt(TextFieldUpdateExpenseMoneySum.getText()), window1);
                        break;
                    case "פברואר":
                        helpM.SQLiteJDBCDriverUpdateExpenseMoneySum(ComboBoxUpdateExpenseMoneySumType.getSelectedItem().toString(), "February", Integer.parseInt(TextFieldUpdateExpenseMoneySum.getText()), window1);
                        break;
                    case "מרץ":
                        helpM.SQLiteJDBCDriverUpdateExpenseMoneySum(ComboBoxUpdateExpenseMoneySumType.getSelectedItem().toString(), "March", Integer.parseInt(TextFieldUpdateExpenseMoneySum.getText()), window1);
                        break;
                    case "אפריל":
                        helpM.SQLiteJDBCDriverUpdateExpenseMoneySum(ComboBoxUpdateExpenseMoneySumType.getSelectedItem().toString(), "April", Integer.parseInt(TextFieldUpdateExpenseMoneySum.getText()), window1);
                        break;
                    case "מאי":
                        helpM.SQLiteJDBCDriverUpdateExpenseMoneySum(ComboBoxUpdateExpenseMoneySumType.getSelectedItem().toString(), "May", Integer.parseInt(TextFieldUpdateExpenseMoneySum.getText()), window1);
                        break;
                    case "יוני":
                        helpM.SQLiteJDBCDriverUpdateExpenseMoneySum(ComboBoxUpdateExpenseMoneySumType.getSelectedItem().toString(), "June", Integer.parseInt(TextFieldUpdateExpenseMoneySum.getText()), window1);
                        break;
                    case "יולי":
                        helpM.SQLiteJDBCDriverUpdateExpenseMoneySum(ComboBoxUpdateExpenseMoneySumType.getSelectedItem().toString(), "July", Integer.parseInt(TextFieldUpdateExpenseMoneySum.getText()), window1);
                        break;
                    case "אוגוסט":
                        helpM.SQLiteJDBCDriverUpdateExpenseMoneySum(ComboBoxUpdateExpenseMoneySumType.getSelectedItem().toString(), "August", Integer.parseInt(TextFieldUpdateExpenseMoneySum.getText()), window1);
                        break;
                    case "ספטמבר":
                        helpM.SQLiteJDBCDriverUpdateExpenseMoneySum(ComboBoxUpdateExpenseMoneySumType.getSelectedItem().toString(), "September", Integer.parseInt(TextFieldUpdateExpenseMoneySum.getText()), window1);
                        break;
                    case "אוקטובר":
                        helpM.SQLiteJDBCDriverUpdateExpenseMoneySum(ComboBoxUpdateExpenseMoneySumType.getSelectedItem().toString(), "October", Integer.parseInt(TextFieldUpdateExpenseMoneySum.getText()), window1);
                        break;
                    case "נובמבר":
                        helpM.SQLiteJDBCDriverUpdateExpenseMoneySum(ComboBoxUpdateExpenseMoneySumType.getSelectedItem().toString(), "November", Integer.parseInt(TextFieldUpdateExpenseMoneySum.getText()), window1);
                        break;
                    case "דצמבר":
                        helpM.SQLiteJDBCDriverUpdateExpenseMoneySum(ComboBoxUpdateExpenseMoneySumType.getSelectedItem().toString(), "December", Integer.parseInt(TextFieldUpdateExpenseMoneySum.getText()), window1);
                        break;
                }
                TextFieldUpdateExpenseMoneySum.setText("");
                helpM.SQLiteJDBCDriverGetAllInformationFromTable(TableInfo, window1);  // refesh the data in the table!
            }
        }
    }//GEN-LAST:event_enterPrassed

    private void TextFieldAddExpenseTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TextFieldAddExpenseTypeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TextFieldAddExpenseTypeActionPerformed

    public JTable getTableInfo() {
        return TableInfo;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ButtonAddExpenseType;
    private javax.swing.JButton ButtonBack;
    private javax.swing.JButton ButtonDeleteExpenseType;
    private javax.swing.JButton ButtonUpdateExpenseMoneySum;
    private javax.swing.JButton ButtonUpdateExpenseNote;
    private javax.swing.JComboBox<String> ComboBoxExpenseType;
    private javax.swing.JComboBox<String> ComboBoxUpdateExpenseMoneySumMonth;
    private javax.swing.JComboBox<String> ComboBoxUpdateExpenseMoneySumType;
    private javax.swing.JComboBox<String> ComboBoxUpdateExpenseNote;
    private javax.swing.JLabel LabelAddExpenseType;
    private javax.swing.JLabel LabelDeleteExpenseType;
    private javax.swing.JLabel LabelUpdateExpenseMoneySum;
    private javax.swing.JLabel LabelUpdateExpenseNote;
    private javax.swing.JTable TableInfo;
    private javax.swing.JTextField TextFieldAddExpenseType;
    private javax.swing.JTextField TextFieldUpdateExpenseMoneySum;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
